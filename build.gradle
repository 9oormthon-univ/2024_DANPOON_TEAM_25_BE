plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.protobuf' version '0.9.4'
}

group = '9oormthon.univ.flakeide'
version = '0.0.1-SNAPSHOT'
def grpcVersion = '1.56.1'
def protobufVersion = '3.21.7'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'io.grpc:grpc-netty-shaded:1.56.1' // 버전은 필요에 따라 조정
    implementation 'io.grpc:grpc-protobuf:1.56.1'
    implementation 'io.grpc:grpc-stub:1.56.1'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'io.grpc:grpc-stub:1.57.2'
    implementation "com.google.protobuf:protobuf-java:4.28.3"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //Webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // 테스트용 h2
    runtimeOnly 'com.h2database:h2'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/generated/main/java'
        }
        proto {
            srcDirs 'src/main/proto'
        }
    }
}
tasks.named('test') {
    useJUnitPlatform()
}
tasks.withType(Copy) {
    filesMatching("**/*.proto") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}